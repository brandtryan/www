## Initial d3ia.html
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title>D3 in Action Examples</title>
  <meta charset="utf-8" />
</head>
<script src="d3.v3.min.js" type="text/javascript">
</script>
<script src="sankey.js" type="text/javascript">
</script>
<style>
path.domain {
  fill: none;
  stroke: black;
}

.inactive, .tentative {
  stroke: darkgray;
  stroke-width: 4px;
  stroke-dasharray: 5 5;
}

.tentative {
  opacity: .5;
}

.active {
  stroke: black;
  stroke-width: 4px;
  stroke-dasharray: 0;
}

circle {
  fill: red;
}

rect {
  fill: darkgray;
}

</style>
<body>

<div id="vizcontainer">
<svg style="width:500px;height:500px;border:1px lightgray solid;" />
</div>
<div id="controls">
</div>

  <!-- Figure 1.9 HTML Content
  <path d="M 10,60 40,30 50,50 60,30 70,80" style="fill:black;stroke:gray;stroke-width:4px;" />
  <polygon style="fill:gray;" points="80,400 120,400 160,440 120,480 60,460" />
<g>
<circle cy="100" cx="200" r="30"/>
<rect x="410" y="200" width="100" height="50" style="fill:pink;stroke:black;stroke-width:1px;" />
</g>
-->

<!-- HTML Content with CSS Classes 
    <path d="M 10,60 40,30 50,50 60,30 70,80" />
  <polygon class="inactive" points="80,400 120,400 160,440 120,480 60,460"/>
<g>
<circle cy="100" cx="200" r="30"/>
<rect class="active" x="410" y="200" width="100" height="50" />
</g>

-->
  
  <!-- Figure 1.10 Transform Example content for SVG canvas
  <g>
<circle r="5"/>
<text>A Label</text>
</g>
<g transform="translate(100,50)">
<circle r="5" />
<text>A Label</text>
</g>
<g transform="translate(100,400)scale(3.5)">
<circle r="5"/>
<text>A Label</text>
</g>
  -->
  
  <!-- Figure 1.12 Path Example
  <path style="fill:none;stroke:gray;stroke-width:4px;" d="M 10,60 40,30 50,50 60,30 70,80" transform="translate(0,0)" />
  <path style="fill:black;stroke:gray;stroke-width:4px;" d="M 10,60 40,30 50,50 60,30 70,80" transform="translate(0,100)" />
  <path style="fill:none;stroke:gray;stroke-width:4px;" d="M 10,60 40,30 50,50 60,30 70,80Z" transform="translate(0,200)" />
  <path style="fill:black;stroke:gray;stroke-width:4px;" d="M 10,60 40,30 50,50 60,30 70,80Z" transform="translate(0,300)" />
  -->
  
<!--
</svg>  
  
</div>
-->

  <footer>
<script>
##Example Scripts
</script>
  </footer>
</body>
</html>

##########CHAPTER 1################

##1.35
var someData = ["filler", "filler", "filler", "filler"];
d3.select("body").selectAll("div").data(someData).enter().append("div").html("Wow").append("span").html("Even More Wow").style("font-weight", "900");

someNumbers = [17, 82, 9, 500, 40];
someColors = ["blue", "red", "chartreuse", "orange"];
somePeople = [{name: "Peter", age: 27}, {name: "Sulayman", age: 24}, {name: "K.C.", age: 49}];
console.log(someNumbers.filter(function(el) {return el >= 40 ? this : null}));
console.log(someColors.filter(function(el) {return el.length < 5 ? this : null}));
console.log(
	someNumbers.filter(function(el) {return if(el >= 40) {
		this;
		}
   	else {
   		null;
		}
	});
smallerNumbers = someNumbers.filter(function(el) {return el >= 40 ? this : null});
d3.select("body").selectAll("div").data(smallerNumbers).enter().append("div ").html(function (d) {return d});

##1.46
var person = {name: "Charlie", age: 55, employed: true, childrenNames: ["Ruth", "Charlie Jr."]};
person.name // Charlie
person["name"] // Charlie
person.name = "Charles" // Sets name to Charles person["name"] = "Charles" // Sets name to Charles person.age < 65 // true
person.childrenNames // ["Ruth", "Charlie Jr."] person.childrenNames[0] // "Ruth"

##1.51
d3.select("body").append("div")
￼.style("border", "1px black solid")
￼.html("hello world");
d3.select("div")
.style("background-color", "pink")
.style("font-size", "24px")
.attr("class", "d3div")
.on("click", function() {console.log("You clicked a div")})

##1.52
d3.select("svg").append("line").attr("x1", 20).attr("y1",20).attr("x2",400).attr("y2",400).style("stroke", "black").style("stroke-width","2px");
d3.select("svg").append("text").attr("x",20).attr("y",20).text("HELLO");
d3.select("svg").append("circle").attr("r",￼20).attr("cx",20).attr("cy",20).style("fill","red");
d3.select("svg").append("circle").attr("r", 100).attr("cx",400).attr("cy",400).style("fill","lightblue");
d3.select("svg").append("text").attr("x",400).attr("y",400).text("WORLD");

##1.53
d3.select("svg").append("circle").attr("r",20).attr("cx",20).attr("cy",20).style("fill","red");
d3.select("svg").append("text").attr("id",￼"a").attr("x",20).style("opacity", 0).attr("y",20).text("HELLO WORLD");
d3.select("svg").append("circle").attr("r",100).attr("cx",400).attr("cy",400).style("fill","lightblue");
d3.select("svg").append("text").attr("id","b").attr("x",400).attr("y",400).style("opacity", 0).text("Uh, hi.");
d3.select("#a").transition().delay(1000).style("opacity", 1);
d3.select("#b").transition().delay(3000).style("opacity", .75);
d3.selectAll("circle").transition().duration(2000).attr("cy", 200);

##########CHAPTER 2################

##cities.csv
"label","population","country","x","y"
"San Francisco", 750000,"USA",-37,122
"Fresno", 500000,"USA",-36,119
"Lahore",12500000,"Pakistan",31,74
"Karachi",13000000,"Pakistan",24,67
"Rome",2500000,"Italy",41,12
"Naples",1000000,"Italy",40,14
"Rio",12300000,"Brazil",-22,-43
"Sao Paolo",12300000,"Brazil",-23,-46

##tweets.json
{
"tweets": [
{"user": "Al", "content": "I really love seafood.", "timestamp": " Mon Dec 23 2013 21:30 GMT-0800 (PST)", retweets: ["Raj","Pris","Roy"], favorites: ["Sam"]},
{"user": "Al", "content": "I take that back, this doesn't taste so good.", "timestamp": "Mon Dec 23 2013 21:55 GMT-0800 (PST)", retweets: ["Roy"], favorites: []},
{"user": "Al", "content": "From now on, I'm only eating cheese sandwiches.", "timestamp": "Mon Dec 23 2013 22:22 GMT-0800 (PST)", retweets: [], favorites: ["Roy","Sam"]},
{"user": "Roy", "content": "Great workout!", "timestamp": " Mon Dec 23 2013 7:20 GMT-0800 (PST)", retweets: [], favorites: []},
{"user": "Roy", "content": "Spectacular oatmeal!", "timestamp": " Mon Dec 23 2013 7:23 GMT-0800 (PST)", retweets: [], favorites: []},
{"user": "Roy", "content": "Amazing traffic!", "timestamp": " Mon Dec 23 2013 7:47  GMT-0800 (PST)", retweets: [], favorites: []},
{"user": "Roy", "content": "Just got a ticket for texting and driving!", "timestamp": " Mon Dec 23 2013 8:05 GMT-0800 (PST)", retweets: [], favorites: ["Sam", "Sally", "Pris"]},
{"user": "Pris", "content": "Going to have some boiled eggs.", "timestamp": " Mon Dec 23 2013 18:23 GMT-0800 (PST)", retweets: [], favorites: ["Sally"]},
{"user": "Pris", "content": "Maybe practice some gymnastics.", "timestamp": " Mon Dec 23 2013 19:47  GMT-0800 (PST)", retweets: [], favorites: ["Sally"]},
{"user": "Sam", "content": "@Roy Let's get lunch", "timestamp": " Mon Dec 23 2013 11:05 GMT-0800 (PST)", retweets: ["Pris"], favorites: ["Sally", "Pris"]}
]
}

d3.csv("cities.csv",function(data) {console.log(data)});
d3.json("tweets.json",function(data) {console.log(data)});

##2.21
d3.csv("cities.csv",function(error,data) {dataViz(data)});
function dataViz(incomingData) {
d3.select("body").selectAll("div.cities")
.data(incomingData)
.enter()
.append("div")
.attr("class","cities")
.html(function(d,i) {return d.label});

##2.23

var yScale = d3.scale.linear().domain([0,24500]).range([0,100]);
d3.select("svg")
.selectAll("rect")
.data([14, 68, 24500, 430, 19, 1000, 5555])
.enter()
.append("rect")
.attr("width", 10)
.attr("height", function(d) {return yScale(d)})
.style("fill", "blue")
.style("stroke", "red")
.style("stroke-width", "1px").style("opacity", .25).attr("x", function(d,i) {return i * 10}).attr("y", function(d) {return 100 - yScale(d)});

maxPopulation = d3.max(incomingData, 
function(el) {return parseInt(el.population)}
); #A
var yScale = d3.scale.linear().domain([0,maxPopulation]).range([0,460]);

##LISTING 2.3
function dataViz(incomingData) {

maxPopulation = d3.max(incomingData, function(el) {return parseInt(el.population)});
var yScale = d3.scale.linear().domain([0,maxPopulation]).range([0,460]);

d3.select("svg")
.selectAll("rect")
.data(incomingData)
.enter()
.append("rect")
.attr("width", 50)
.attr("height", function(d) {return yScale(d.population)})
.attr("x", function(d,i) {return i * 10})
.attr("y", function(d) {return 480 - yScale(d.population)})
.style("fill", "blue")
.style("stroke", "red")
.style("stroke-width", "1px")
.style("opacity", .25)
}

##LISTING 2.4
d3.json("tweets.json",function(error,data) {dataViz(data.tweets)});
function dataViz(incomingData) {

var nestedTweets = d3.nest()
.key(function (el) {return el.user})
.entries(incomingData);

nestedTweets.forEach(function (el) {
el.numTweets = el.values.length
})

var maxTweets = d3.max(nestedTweets, function(el) {return el.numTweets});

var yScale = d3.scale.linear().domain([0,maxTweets]).range([0,100]);

d3.select("svg")
.selectAll("rect")
.data(nestedTweets)
.enter()
.append("rect")
.attr("width", 50)
.attr("height", function(d) {return yScale(d.numTweets)})
.attr("x", function(d,i) {return i * 10})
.attr("y", function(d) {return 100 - yScale(d.numTweets)})
.style("fill", "blue")
.style("stroke", "red")
.style("stroke-width", "1px").style("opacity", .25)
}

##2.32
function dataViz(incomingData) {

incoming.forEach(function (el) {
el.impact = el.favorites.length + el.retweets.length
el.tweetTime = new Date(el.timestamp);
})

var maxImpact = d3.max(incomingData, function(el) {return el.impact});
var startEnd = d3.extent(incomingData, function(el) {return el.tweetTime});
var timeRamp = d3.time.scale().domain(startEnd).range([20,480]);
var yScale = d3.scale.linear().domain([0,maxImpact]).range([0,460]);
var radiusScale = d3.scale.linear().domain([0,maxImpact]).range([1,20]);
var colorScale = d3.scale.linear().domain([0,maxImpact]).range(["white","#990000"]);

d3.select("svg")
.selectAll("circle")
.data(incomingData)
.enter()
.append("circle")
.attr("r", function(d) {return radiusScale(d.impact)})
.attr("cx", function(d,i) {return timeRamp(d.tweetTime)})
.attr("cy", function(d) {return 480 - yScale(d.impact)})
.style("fill", function(d) {return colorScale(d.impact)})
.style("stroke", "black")
.style("stroke-width", "1px")
}

##2.33
function dataViz(incomingData) {

incoming.forEach(function (el) {
el.impact = el.favorites.length + el.retweets.length
el.tweetTime = new Date(el.timestamp);
})

var maxImpact = d3.max(incomingData, function(el) {return el.impact});
var startEnd = d3.extent(incomingData, function(el) {return el.tweetTime});
var timeRamp = d3.time.scale().domain(startEnd).range([20,480]);
var yScale = d3.scale.linear().domain([0,maxImpact]).range([0,460]);
var radiusScale = d3.scale.linear().domain([0,maxImpact]).range([1,20]);
var colorScale = d3.scale.linear().domain([0,maxImpact]).range(["white","#990000"]);

var tweetG = d3.select("svg")
.selectAll("g")
.data(incomingData)
.enter()
.append("g")
.attr("transform", function(d) {
return "translate(" + 
timeRamp(d.tweetTime) + "," + (480 - yScale(d.impact))
+ ")"
})

tweetG.append("circle")
.attr("r", function(d) {return radiusScale(d.impact)})
.style("fill", "#990000")
.style("stroke", "black")
.style("stroke-width", "1px")

tweetG.append("text")
.text(function(d) {return d.user + "-" + d.tweetTime.getHours()});
}

d3.selectAll("g").select("text").text(function(d) {return d});

##UPDATING
function dataViz(incomingData) {

incoming.forEach(function (el) {
el.impact = el.favorites.length + el.retweets.length
el.tweetTime = new Date(el.timestamp);
})

var maxImpact = d3.max(incomingData, function(el) {return el.impact});
var startEnd = d3.extent(incomingData, function(el) {return el.tweetTime});
var timeRamp = d3.time.scale().domain(startEnd).range([50,450]);
var yScale = d3.scale.linear().domain([0,maxImpact]).range([0,20]);

d3.select("svg")
.selectAll("circle")
.data(incomingData, function(d) {return JSON.stringify(d)})
.enter()
.append("circle")
.attr("r", function(d) {return yScale(d.impact)})
.attr("cx", function(d,i) {return timeRamp(d.tweetTime)})
.attr("cy", function(d) {return 100 - yScale(d.impact)})
.style("fill", "#990000")
.style("stroke", "black")
.style("stroke-width", "1px")
}

var filteredData = incomingData.filter(
function(el) {return el.impact > 0}
);
d3.selectAll("circle")
.data(filteredData, function(d) {return JSON.stringify(d)})
.exit()
.remove();

##########CHAPTER 3################

##worldcup.csv
"team","region","win","loss","draw","points","gf","ga","cs","yc","rc"
"Netherlands","UEFA",6,0,1,18,12,6,2,23,1
"Spain","UEFA",6,0,1,18,8,2,5,8,0
"Germany","UEFA",5,0,2,15,16,5,3,10,1
"Argentina","CONMEBOL",4,0,1,12,10,6,2,8,0
"Uruguay","CONMEBOL",3,2,2,11,11,8,3,13,2
"Brazil","CONMEBOL",3,1,1,10,9,4,2,9,2
"Ghana","CAF",2,2,1,8,5,4,1,12,0
"Japan","AFC",2,1,1,7,4,2,2,4,0

##d3ia.css
text {
font-size: 10px;
}

g.active > text {
font-size: 30px;
}

circle {
fill: pink;
stroke: black;
stroke-width: 1px;
}

circle.active {
fill: red;
}

circle.inactive {
fill: gray;
}

##d3ia2.html
<html>
<head>
  <title>D3 in Action Examples</title>
  <meta charset="utf-8" />
</head>
<script src="d3.v3.min.js" type="text/javascript" />
<script src="colorbrewer.js" type="text/javascript" />
<script src="soccerviz.js" type="text/javascript" />
<body onload="createSoccerViz()">
<div id="viz">
<svg style="width:500px;height:500px;border:1px lightgray solid;" />
</div>
<div id="controls" />
</body>
</body>
</html>

##modal.html
<table>
    <tr>
        <th>Statistics</th>
    </tr>
    <tr><td>Team Name</td><td class="data"></td></tr>
    <tr><td>Region</td><td class="data"></td></tr>
    <tr><td>Wins</td><td class="data"></td></tr>
    <tr><td>Losses</td><td class="data"></td></tr>
    <tr><td>Draws</td><td class="data"></td></tr>
    <tr><td>Points</td><td class="data"></td></tr>
    <tr><td>Goals For</td><td class="data"></td></tr>
    <tr><td>Goals Against</td><td class="data"></td></tr>
    <tr><td>Clean Sheets</td><td class="data"></td></tr>
    <tr><td>Yellow Cards</td><td class="data"></td></tr>
    <tr><td>Red Cards</td><td class="data"></td></tr>
</table>

##d3ia.css
  #modal {
    position:fixed;
    left:150px;
    top:20px;
    z-index:1;
    background: white;
    border: 1px black solid;
    box-shadow: 10px 10px 5px #888888;
  }
  
  tr {
    border: 1px gray solid;
  }

  td {
    font-size: 10px;
  }
  td.data {
    font-weight: 900;
  }



##FINAL SoccerViz and Event Functions
function createSoccerViz() {
  d3.csv("teams.csv", function(data) {
    overallTeamViz(data);
  })
  
  d3.text("resources/modal.html", function(data) {d3.select("body").append("div").attr("id", "modal").html(data)});
  function overallTeamViz(incomingData) {
    worldCup = incomingData;
    d3.select("svg")
    .append("g")
    .attr("id", "teamsG")
    .attr("transform", "translate(50,300)").selectAll("g").data(incomingData)
    .enter()
    .append("g")
    .attr("class", "overallG")
    .on("click", teamClick)
    .on("mouseover", highlightRegion2)
    .on("mouseout", unHighlight)
    .attr("transform", function (d,i) {return "translate(" + (i * 50) + ", 0)"})
    
    var teamG = d3.selectAll("g.overallG");
    
    teamG
    .append("circle").attr("r", 0).style("fill", "pink").style("stroke", "black").style("stroke-width", "1px")
    .transition()
    .delay(function(d,i) {return i * 100})
    .duration(500)
    .attr("r", 40)
    .transition()
    .duration(500)
    .attr("r", 20);
    
    teamG
    .append("text")
    .style("text-anchor", "middle")
    .attr("y", 30)
    .style("font-size", "10px")
    .text(function(d) {return d.team})

  var dataKeys = d3.keys(incomingData[0]).filter(function (el) {return el != "team" && el != "region"})
    
    d3.select("#controls").selectAll("button.teams").data(dataKeys).enter().append("button")
    .on("click", buttonClick)
    .html(function(d) {return d})
    
  }
}

function buttonClick2(d) {
  var maxValue = d3.max(worldCup, function(el) {return parseFloat(el[d])});
  var ybRamp = d3.scale.linear()
  .interpolate(d3.interpolateHcl)
  .domain([0,maxValue]).range(["", "hsl(228,30%,20%)"])
  var radiusScale = d3.scale.linear().domain([0,maxValue]).range([2,20]);
  d3.selectAll("g.overallG").select("circle").transition().duration(1000).style("fill", function(p) {return ybRamp(p[d])}).attr("r", function(p) {return radiusScale(p[d])})
}

function buttonClick(d) {
  var maxValue = d3.max(worldCup, function(el) {return parseFloat(el[d])});
  var colorQuantize = d3.scale.quantize().domain([0,maxValue]).range([0,1,2,3]);
  var tenColorScale = d3.scale.category10(["UEFA", "CONMEBOL", "CAF", "AFC"]);
  var radiusScale = d3.scale.linear().domain([0,maxValue]).range([2,20]);
  d3.selectAll("g.overallG").select("circle").transition().duration(1000).style("fill", function(p) {return tenColorScale(p.region)}).attr("r", function(p) {return radiusScale(p[d])})
}

function buttonClick3(d) {
  var maxValue = d3.max(worldCup, function(el) {return parseFloat(el[d])});
  var colorQuantize = d3.scale.quantize().domain([0,maxValue]).range(Reds[5]);
  var radiusScale = d3.scale.linear().domain([0,maxValue]).range([2,20]);
  d3.selectAll("g.overallG").select("circle").transition().duration(1000).style("fill", function(p) {return colorQuantize(p[d])}).attr("r", function(p) {return radiusScale(p[d])})
}

function unHighlight() {
  d3.selectAll("g.overallG").select("circle").style("fill", "pink");
  d3.selectAll("g.overallG").select("text").style("font-size", "10px").attr("y", 30);
}
function highlightRegion(d) {
  d3.selectAll("g.overallG").select("circle").style("fill", function(p) {return p.region == d.region ? "red" : "gray"})
}

function highlightRegion2(d,i) {
  var teamColor = d3.rgb("pink")
  d3.select(this).select("text").style("font-size", "30px").attr("y", 10)
  d3.selectAll("g.overallG").select("circle").style("fill", function(p) {return p.region == d.region ? teamColor.darker(.75) : teamColor.brighter(.5)})
  this.parentElement.appendChild(this);
}


##########CHAPTER 4################

##ch4stylesheet
line { #a
  shape-rendering: crispEdges;
  stroke: #000;
}

line.minor  {
  stroke: #777;
  stroke-dasharray: 2,2;
}

path.domain {
  fill: none;
  stroke: black;
}

##boxplots.csv
day,min,max,average,std1,std2,number
1,14,65,33,20,35,22
2,25,73,25,25,30,170
3,15,40,25,17,28,185
4,18,55,33,28,42,135
5,14,66,35,22,45,150
6,22,70,34,28,42,170
7,14,65,33,30,50,28

##tweetdata.csv
day,tweets,retweets,favorites
1,1,2,5
2,6,11,3
3,3,0,1
4,5,2,6
5,10,29,16
6,4,22,10
7,3,14,1
8,5,7,7
9,1,35,22
10,4,16,15

##movies.csv
day,movie1,movie2,movie3,movie4,movie5,movie6
1,20,8,3,0,0,0
2,18,5,1,13,0,0
3,14,3,1,10,0,0
4,7,3,0,5,27,15
5,4,3,0,2,20,14
6,3,1,0,0,10,13
7,2,0,0,0,8,12
8,0,0,0,0,6,11
9,0,0,0,0,3,9
10,0,0,0,0,1,8

##movies line chart callback function
for (x in data[0]) {
      if (x != "day") {

    movieArea = d3.svg.line()
        .x(function(d) {
        return xScale(d.day)
    })
        .y(function(d) {
        return yScale(d[x])
    })
        .interpolate("cardinal")
    
    d3.select("svg")
        .append("path")
        .style("id", x + "Area")
        .attr("d", movieArea(data))
        .attr("fill", "none")
        .attr("stroke", "black")
        .attr("stroke-width", 3)
        .style("opacity", .75)
        
      }
    }

##movies stacked area chart callback function
fillScale = d3.scale.linear()
   .domain([0,5])
   .range(["lightgray","black"]);
var n = 0;
for (x in data[0]) {
if (x != "day") {
movieArea = d3.svg.area()
        .x(function(d) {
        return xScale(d.day)
    })
        .y(function(d) {
        return yScale(simpleStacking(d,x))
    })
        .y0(function(d) {
        return yScale(simpleStacking(d,x) - d[x]);
    })
        .interpolate("basis")
d3.select("svg")
        .append("path")
        .style("id", x + "Area")
        .attr("d", movieArea(data))
        .attr("fill", fillScale(n))
        .attr("stroke", "none")
        .attr("stroke-width", 2)
        .style("opacity", .5)
        n++;
        }
    }
function simpleStacking(
incomingData, incomingAttribute) {
      var newHeight = 0;
      for (x in incomingData) {
        if (x != "day") {
          newHeight += parseInt(incomingData[x]);
          if (x == incomingAttribute) {
            break;
          }
        }
      }
      return newHeight;
    }


##Scatterplot
  function scatterExample() {
    var scatterData = [{friends: 5, salary: 22000}, {friends: 3, salary: 18000}, {friends: 10, salary: 88000}, {friends: 0, salary: 180000}, {friends: 27, salary: 56000}, {friends: 8, salary: 74000}];
    xScale = d3.scale.linear().domain([0,180000]).range([0,500]);
    yScale = d3.scale.linear().domain([0,27]).range([0,500]);

    xAxis = d3.svg.axis().scale(xScale).orient("bottom").tickSize(500).ticks(4);    
    d3.select("svg").append("g").attr("id", "xAxisG").call(xAxis);
    
    yAxis = d3.svg.axis().scale(yScale).orient("right").ticks(16).tickSize(500).tickSubdivide(true);    
    d3.select("svg").append("g").attr("id", "yAxisG").call(yAxis);
 
   d3.select("svg").selectAll("circle").data(scatterData).enter().append("circle").attr("r", 5).attr("cx", function(d) {return xScale(d.salary)}).attr("cy", function(d) {return yScale(d.friends)})   
  }

##Line Chart
  function lineExample() {
    d3.csv("tweetdata.csv", function(error, data) {
	exposedData = data;
    xScale = d3.scale.linear().domain([1,10.5]).range([20,480]);
    yScale = d3.scale.linear().domain([0,35]).range([480,20]);

    xAxis = d3.svg.axis().scale(xScale).orient("bottom").tickSize(480).tickValues([1,2,3,4,5,6,7,8,9,10]);    
    d3.select("svg").append("g").attr("id", "xAxisG").call(xAxis);
    
    yAxis = d3.svg.axis().scale(yScale).orient("right").ticks(10).tickSize(480).tickSubdivide(true);    
    d3.select("svg").append("g").attr("id", "yAxisG").call(yAxis);

    d3.select("svg").selectAll("circle.tweets").data(data).enter().append("circle").attr("class", "tweets").attr("r", 5).attr("cx", function(d) {return xScale(d.day)}).attr("cy", function(d) {return yScale(d.tweets)}).style("fill", "lightgray")

    d3.select("svg").selectAll("circle.retweets").data(data).enter().append("circle").attr("class", "retweets").attr("r", 5).attr("cx", function(d) {return xScale(d.day)}).attr("cy", function(d) {return yScale(d.retweets)}).style("fill", "black") 

    d3.select("svg").selectAll("circle.favorites").data(data).enter().append("circle").attr("class", "favorites").attr("r", 5).attr("cx", function(d) {return xScale(d.day)}).attr("cy", function(d) {return yScale(d.favorites)}).style("fill", "gray")

    tweetLine = d3.svg.line()
        .x(function(d) {
        return xScale(d.day)
    })
        .y(function(d) {
        return yScale(d.tweets)
    })
        .interpolate("basis")

    retweetLine = d3.svg.line()
        .x(function(d) {
        return xScale(d.day)
    })
        .y(function(d) {
        return yScale(d.retweets)
    })
        .interpolate("step")
        
    favLine = d3.svg.line()
        .x(function(d) {
        return xScale(d.day)
    })
        .y(function(d) {
        return yScale(d.favorites)
    })
        .interpolate("cardinal")

    
    d3.select("svg")
        .append("path")
        .attr("class", "linechart")
        .attr("d", tweetLine(data))
        .attr("fill", "none")
        .attr("stroke", "darkred")
        .attr("stroke-width", 4)

        d3.select("svg")
        .append("path")
        .attr("class", "linechart")
        .attr("d", retweetLine(data) + "Z")
        .attr("fill", "none")
        .attr("stroke", "black")
        .attr("stroke-width", 4)

        d3.select("svg")
        .append("path")
        .attr("class", "linechart")
        .attr("d", favLine(data))
        .attr("fill", "none")
        .attr("stroke", "gray")
        .attr("stroke-width", 4)
 

    })
    
  }
  
  ##Boxplot
  function boxplotExample() {
    d3.csv("boxplot.csv", function(error, data) {
    xScale = d3.scale.linear().domain([1,8]).range([20,470]);
    yScale = d3.scale.linear().domain([0,100]).range([470,20]);
    sizeScale = d3.scale.linear().domain([0,200]).range([20,20]);

    xAxis = d3.svg.axis().scale(xScale).orient("bottom").tickSize(-470).tickValues([1,2,3,4,5,6,7]); 
    d3.select("svg").append("g").attr("transform", "translate(0,480)").attr("id", "xAxisG").call(xAxis);

    yAxis = d3.svg.axis().scale(yScale).orient("right").ticks(8).tickSize(-470).tickSubdivide(true);    
    d3.select("svg").append("g").attr("transform", "translate(470,0)").attr("id", "yAxisG").call(yAxis);

    d3.select("svg").selectAll("g.box")
    .data(data)
    .enter()
    .append("g")
    .attr("class", "box")
    .attr("transform", function(d) {return "translate(" + xScale(d.day) +"," + yScale(d.average) + ")"})
    .each(function(d,i) {
      d3.select(this)
      .append("line")
      .attr("x1", 0)
      .attr("x2", 0)
      .attr("y1", yScale(d.max) - yScale(d.average))
      .attr("y2", yScale(d.min) - yScale(d.average))
      .style("stroke", "black")
      .style("stroke-width", "4px");

      d3.select(this)
      .append("line")
      .attr("x1", -10)
      .attr("x2", 10)
      .attr("y1", yScale(d.max) - yScale(d.average))
      .attr("y2", yScale(d.max) - yScale(d.average))
      .style("stroke", "black")
      .style("stroke-width", "4px");

      d3.select(this)
      .append("line")
      .attr("x1", -10)
      .attr("x2", 10)
      .attr("y1", yScale(d.min) - yScale(d.average))
      .attr("y2", yScale(d.min) - yScale(d.average))
      .style("stroke", "black")
      .style("stroke-width", "4px");
      
      d3.select(this)
      .append("rect")
      .attr("width", 20)
      .attr("x", -10)
      .attr("y", yScale(d.std2) - yScale(d.average))
      .attr("height", yScale(d.std1) - yScale(d.std2))
      .style("fill", "white")
      .style("stroke", "black")
      .style("stroke-width", "2px");

      d3.select(this)
      .append("line")
      .attr("x1", -10)
      .attr("x2", 10)
      .attr("y1", 0)
      .attr("y2", 0)
      .style("stroke", "darkgray")
      .style("stroke-width", "4px");

    })
    })
    
  }
  
  ##Streamgraph
  function streamgraphExample() {
    d3.csv("streamdata.csv", function(error, data) {
      expData = data;
    xScale = d3.scale.linear().domain([0,11]).range([0,500]);
    yScale = d3.scale.linear().domain([-100,100]).range([500,0]);
    sizeScale = d3.scale.linear().domain([0,200]).range([20,20]);
    
    yAxis = d3.svg.axis().scale(yScale).orient("right").ticks(8).tickSize(500).tickSubdivide(true);    
    d3.select("svg").append("g").attr("id", "yAxisG").call(yAxis);

    xAxis = d3.svg.axis().scale(xScale).orient("bottom").tickSize(500).ticks(4);    
    d3.select("svg").append("g").attr("id", "xAxisG").call(xAxis);
    
    fillScale = d3.scale.linear().domain([1,10]).range(["lightgray","black"]);
    n = 0;
    
    for (x in data[0]) {
      if (x != "day") {
        
    movieArea = d3.svg.area()
        .x(function(d) {
        return xScale(d.day)
    })
        .y(function(d) {
        return yScale(alternatingStacking(d,x,"top"))
    })
        .y0(function(d) {
        return yScale(alternatingStacking(d,x,"bottom"));
    })
        .interpolate("basis")
    
    d3.select("svg")
        .insert("path",".movie")
        .attr("class", "movie")
        .style("id", x + "Area")
        .attr("d", movieArea(data))
        .attr("fill", fillScale(n))
        .attr("stroke", "white")
        .attr("stroke-width", 1)
        .style("opacity", 1)
        
      }
      n++;

    }

    function simpleStacking(incomingData, incomingAttribute) {
      var newHeight = 0;
      for (x in incomingData) {
        if (x != "day") {
          newHeight += parseInt(incomingData[x]);
          if (x == incomingAttribute) {
            break;
          }
        }
      }
      return newHeight;
    }

    function alternatingStacking(incomingData, incomingAttribute,topBottom) {
      var newHeight = 0;
      var skip = true;
      for (x in incomingData) {
        if (x != "day") {
        if (x == "movie1" || skip == false) {
          newHeight += parseInt(incomingData[x]);
          if (x == incomingAttribute) {
            break;
          }
          if (skip == false) {
            skip = true;
          }
          else {
            n%2 == 0 ? skip = false : skip = true;
          }
        }
        else {
          skip = false;
        }
      }
      }
      if(topBottom == "bottom") {
        newHeight = -newHeight;
      }
      if (n > 1 && n%2 == 1 && topBottom == "bottom") {
        newHeight = 0;
      }
      if (n > 1 && n%2 == 0 && topBottom == "top") {
        newHeight = 0;
      }
      return newHeight;
    }


    })
    
  }
